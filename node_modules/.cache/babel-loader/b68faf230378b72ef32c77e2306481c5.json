{"ast":null,"code":"import _classCallCheck from \"/Users/mervinserviano/Desktop/HW-Click/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mervinserviano/Desktop/HW-Click/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mervinserviano/Desktop/HW-Click/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mervinserviano/Desktop/HW-Click/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mervinserviano/Desktop/HW-Click/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mervinserviano/Desktop/HW-Click/src/App.js\";\nimport React, { Component } from \"react\";\nimport Nav from \"./components/Nav\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Friends from \"./friends.json\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      Friends: Friends,\n      highScore: 0,\n      score: 0,\n      cardClicked: [],\n      navMessage: \"Click a photo to begin! Clicking the same image twice restarts the game.\"\n    };\n\n    _this.shuffleArray = function (array) {\n      var i = array.length - 1;\n\n      for (; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n\n      return array;\n    };\n\n    _this.handleClick = function (id) {\n      // handleClick push id to newArr, setState highScore cardClicked.\n      var newArr = _this.state.cardClicked;\n      newArr.push(id);\n\n      _this.setState({\n        cardClicked: newArr\n      }); // console.log(\"cardClicked: \" + newArr);\n      // console.log(\"newArr Length: \" + newArr.length);\n\n\n      if (new Set(newArr).size !== newArr.length) {\n        _this.setState({\n          highScore: _this.state.highScore,\n          cardClicked: [],\n          score: 0,\n          navMessage: \"INCORRECT! New round. Click a photo to begin!\"\n        });\n      } else {\n        if (_this.state.score >= _this.state.highScore) {\n          _this.setState({\n            highScore: _this.state.highScore + 1\n          });\n        }\n\n        _this.setState.Friends = _this.shuffleArray(_this.state.Friends);\n\n        _this.setState({\n          score: _this.state.score + 1,\n          navMessage: \"CORRECT!\"\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(Nav, {\n        score: this.state.score,\n        highScore: this.state.highScore,\n        navMessage: this.state.navMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, this.state.Friends.map(function (friend) {\n        return React.createElement(FriendCard, {\n          image: friend.image,\n          handleClick: _this2.handleClick,\n          id: friend.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\n;\nexport default App; // Basis of clicky game: click on randomize pictures, try to get the highest score, clicking on the same picture twice restarts the round.\n//START \n// Shuffle pictures, setState array: [], setState score: 0, message: Click an image to begin, don't click an image twice or the game\n// When a picture is clicked take that id push it into an array.\n// If id === to id of array return message of \"Incorrect\"\n// Else add one point with setState: this.state.score.\n// If score > highScore setState highScore === score\n//","map":{"version":3,"sources":["/Users/mervinserviano/Desktop/HW-Click/src/App.js"],"names":["React","Component","Nav","FriendCard","Wrapper","Friends","App","state","highScore","score","cardClicked","navMessage","shuffleArray","array","i","length","j","Math","floor","random","temp","handleClick","id","newArr","push","setState","Set","size","map","friend","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Nav from \"./components/Nav\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Friends from \"./friends.json\";\n\nclass App extends Component {\n// Setting state: Friends, highScore, score, cardClick, navMessage\n  state = {\n    Friends,\n    highScore: 0,\n    score: 0,\n    cardClicked: [],\n    navMessage: \"Click a photo to begin! Clicking the same image twice restarts the game.\"\n  };\n\n// Function to shuffle the photos\n  shuffleArray = (array) => {\n    let i = array.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  };\n\n  handleClick = (id) => {\n    // handleClick push id to newArr, setState highScore cardClicked.\n    let newArr = this.state.cardClicked;\n    newArr.push(id);\n    this.setState({ cardClicked: newArr });\n    // console.log(\"cardClicked: \" + newArr);\n    // console.log(\"newArr Length: \" + newArr.length);\n\n    if (new Set(newArr).size !== newArr.length) {\n      this.setState({\n        highScore: this.state.highScore,\n        cardClicked: [],\n        score: 0,\n        navMessage: \"INCORRECT! New round. Click a photo to begin!\"\n      })\n    } \n    else {\n      if (this.state.score >= this.state.highScore) {\n        this.setState({\n          highScore: this.state.highScore + 1,\n        });\n      }\n      this.setState.Friends = this.shuffleArray(this.state.Friends);\n      this.setState({\n        score: this.state.score + 1,\n        navMessage: \"CORRECT!\"\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Nav\n          score={this.state.score}\n          highScore={this.state.highScore}\n          navMessage={this.state.navMessage}\n        />\n        <Wrapper>\n          {this.state.Friends.map(friend => (\n            <FriendCard\n              image={friend.image}\n              handleClick={this.handleClick}\n              id={friend.id}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  };\n};\n\nexport default App;\n\n// Basis of clicky game: click on randomize pictures, try to get the highest score, clicking on the same picture twice restarts the round.\n\n//START \n// Shuffle pictures, setState array: [], setState score: 0, message: Click an image to begin, don't click an image twice or the game\n\n// When a picture is clicked take that id push it into an array.\n// If id === to id of array return message of \"Incorrect\"\n// Else add one point with setState: this.state.score.\n// If score > highScore setState highScore === score\n// "]},"metadata":{},"sourceType":"module"}